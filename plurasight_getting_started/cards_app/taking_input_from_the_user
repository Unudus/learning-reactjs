// jsdrops.com/rgs2.5

const testData = [
    {name: "Dan Abramov", avatar_url: "https://avatars0.githubusercontent.com/u/810438?v=4", company: "@facebook"},
    {name: "Sophie Alpert", avatar_url: "https://avatars2.githubusercontent.com/u/6820?v=4", company: "Humu"},
    {name: "Sebastian MarkbÃ¥ge", avatar_url: "https://avatars2.githubusercontent.com/u/63648?v=4", company: "Facebook"},
];

const CardList = (props) => (
	<div>
  	{props.profiles.map(profile => <Card {...profile}/>)}
	</div>
);

class Card extends React.Component {
	render() {
  	const profile = this.props;
  	return (
    	<div className="github-profile">
    	  <img src={profile.avatar_url} />
        <div className="info">
          <div className="name">{profile.name}</div>
          <div className="company">{profile.company}</div>
        </div>
    	</div>
    );
  }
}

// here's the Form using a ref attribute to keep track of the user input
/*
class Form extends React.Component {
  // need to reference a react object in post-init logic, do this to create a "reference", i.e. a pointer, to it! note the ref={} in the render() message which then sets this
  userNameInput = React.createRef();
  
  handleSubmit = (e) => {
    e.preventDefault(); // just like vanilla JS in browser wrangling !
    
    // wanna see what the current value is...(notice current.value!)
    console.log( this.userNameInput.current.value );
    
    
  };
  
	render() {
  	return (
    	<form onSubmit={this.handleSubmit}>
    	  <input 
          type="text" 
          placeholder="GitHub username" 
          ref={this.userNameInput} 
          required 
        />
        <button>Add card</button>
    	</form>
    );
  }
}
*/

// this might seem needless fiddly but because React is now managing the value, it'll instantly handle data changes, e.g. if a side-affect of another block of code changes the state's value!!
class Form extends React.Component {
  state = { userName: '' };
  
  handleSubmit = (e) => {
    e.preventDefault(); // just like vanilla JS in browser wrangling !
    
    // wanna see what the current value is...
    console.log( this.state.userName );
    
    
  };
  
  // note unlike the ref example above, we're letting React control the input's value by definition here, and has to proactively update state when it reports a change . Just like in browser js e[vent].target is very very useful
	render() {
  	return (
    	<form onSubmit={this.handleSubmit}>
    	  <input 
          type="text" 
          value={this.state.userName}
          onChange={ e => this.setState({userName:e.target.value}) }
          placeholder="GitHub username" 
          required 
        />
        <button>Add card</button>
    	</form>
    );
  }
}


class App extends React.Component {
  state = {
    profiles: testData,
  };
  
	render() {
  	return (
    	<div>
    	  <div className="header">{this.props.title}</div>
        <Form />
        <CardList profiles={this.state.profiles} />
    	</div>
    );
  }	
}

ReactDOM.render(
	<App title="The GitHub Cards App" />,
  mountNode,
);
