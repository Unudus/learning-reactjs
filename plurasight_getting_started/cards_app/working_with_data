// jsdrops.com/rgs2.3

 // source of data was api.github.com/users/gaeron (if api is still working when being read here)

	const testData = [
			{name: "Dan Abramov", avatar_url: "https://avatars0.githubusercontent.com/u/810438?v=4", company: "@facebook"},
      {name: "Sophie Alpert", avatar_url: "https://avatars2.githubusercontent.com/u/6820?v=4", company: "Humu"},
  		{name: "Sebastian Markb√•ge", avatar_url: "https://avatars2.githubusercontent.com/u/63648?v=4", company: "Facebook"},
	];


//Card list defined in a functional style to show off func vs class mixing

// Note the different ways you can pass values from components to their children depending on how verbose/specific you want to be. Most of the time you'll likely just want to use the 3rd approach to render a list fetched from some datasource!

// Easy to forget, but [<Thing />, <Thing />,<Thing />] is valid as a way to define/express components, which is why the .map() approach works
const CardList = (props) => (
  <div>
    <Card name={testData[0].name} company={testData[0].company} avatar_url={testData[0].avatar_url}/>
    <Card {...testData[1]}/>
    {testData.map(profile => <Card {...profile} />)}
  </div>
);

class Card extends React.Component {
	render() {
    // remember const just means the pointer aims at the same thing, objects/arrays/complex-entities can still have their properities fiddled with
    // And note because we're leveraging the class approach "this" handles binding values passed in for us
    const profile = this.props;
    
  	return (
    	<div className="github-profile">
    	  <img src="{profile.avatar_url}" />
        <div className="info">
          <div className="name">{profile.name}</div>
          <div className="company">{profile.company}</div>
        </div>
    	</div>
    );
  }
}

class App extends React.Component {
	render() {
  	return (
    	<div>
    	  <div className="header">{this.props.title}</div>
        <CardList />
    	</div>
    );
  }	
}

ReactDOM.render(
	<App title="The GitHub Cards App" />,
  mountNode,
);
