// video starts from jsdrops.com/rgs1.4 with some of rgs1.5

function Button(props) {
   const handleClick = () => {props.onClickFunction(props.increment)};
  
  // first part of passing values into functions, grabbing it from local scope or props and defining it as a param. 
  // Note we could just directly apply the logic, but we'd be relying on closure magic here, if you've no params to pass, you don't put the wrapper in, because its stil technically after a function reference
	return (
  	<button onClick={handleClick}>
      +{props.increment}
    </button>
  );
}

function Display(props) {
	return (
  	<div>{props.message}</div>
  );
}

function App() {
	const [counter, setCounter] = useState(0);
  // the last step of passing values into functions, setting the function up to expect one
  const incrementCounter = (incrementValue) => setCounter(counter+incrementValue);
  
  // Note how props are space-separated key/value pairs. The values could be expressed with "" instead of {} but that would turn it into a string literal, so avoid where that's not desirable
  
	return (
    <div>
      <Button onClickFunction={incrementCounter} increment={1} />
      <Button onClickFunction={incrementCounter} increment={5} />
      <Button onClickFunction={incrementCounter} increment={10} />
      <Button onClickFunction={incrementCounter} increment={100} />
      <Display message={counter}/>
    </div>  
  );
}

ReactDOM.render(
  <App />, 
  document.getElementById('mountNode'),
);
